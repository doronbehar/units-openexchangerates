#!/usr/bin/python
"""A [GNU Units][gnu-units] compatible exchange rates currencies updater

If you have ever used [GNU units][gnu-units], you may have enjoyed
it's very smooth user interface and command line arguments
interpretation. `units` also provides exchange rates currency
conversions. It does so by reading the file `currency.units`
(usually located in `/usr/share/units/` in most distributions). The
`units` program usually is distributed with a python script
`units_cur` which updates the file `currency.units` with data from
[https://finance.yahoo.com/](https://finance.yahoo.com/)'s free API.

The purpose of this script is to provide an alternative
yet compatible currency units updater for GNU units using
[https://openexchangerates.org](https://openexchangerates.org) (also
free with registration) API. The advantages in using this script over
the original `units_cur` are:

- More currencies including digital currencies as well:
https://docs.openexchangerates.org/docs/supported-currencies
- Faster and more accurate exchange rates
using base currencies according to [your
choice](https://docs.openexchangerates.org/docs/set-base-currency#default-base-currency).

[gnu-units]: https://gnu.org/software/units
"""

# For Python 2 & 3 compatibility
from __future__ import absolute_import, division, print_function

# Normal imports
from argparse import ArgumentParser
from datetime import date
from os import linesep
import sys
import codecs
import requests

VERSION = '4.1'

def main():
    """
    main
    """
    default_outfile_name = '/usr/share/units/currency.units'
    argp = ArgumentParser(
        description="GNU units compatible currencies information updater"
        "into the specified filename or if no filename is "
        "given, the default: '{}'.  The special filename '-' "
        "will send the currency data to stdout.".format(default_outfile_name),
    )

    argp.add_argument(
        'output_file',
        default=default_outfile_name,
        help='the file to update',
        metavar='filename',
        nargs='?',
        type=str,
    )

    argp.add_argument(
        '-V', '--version',
        action='version',
        version='%(prog)s version ' + VERSION,
        help='display units_cur version',
    )

    argp.add_argument(
        '-k', '--apikey',
        metavar='APIKEY',
        nargs=1,
        required=True,
        help='API key to use when querying openexchangerates.org'
    )

    argp.add_argument(
        '-a', '--alternative',
        action='store_true',
        help='Add alternative unofficial, black market and digital currencies'
             'as well',
    )

    outfile_name = argp.parse_args().output_file or default_outfile_name

    api_base = 'https://openexchangerates.org/api'
    api_params = '?app_id=' + argp.parse_args().apikey[0]
    if argp.parse_args().alternative:
        api_params = api_params + '&show_alternative=1'

    try:
        res = requests.get(api_base + '/latest.json' + api_params)
        res.raise_for_status()
        rates = res.json()["rates"]
    except requests.exceptions.RequestException as err:
        sys.stderr.write('Error connecting openexchangerates.org server:\n{}.'
                         '\n'.
                         format(err))
        exit(1)

    try:
        res = requests.get(api_base + '/currencies.json' + api_params)
        res.raise_for_status()
        currencies = res.json()
    except requests.exceptions.RequestException as err:
        sys.stderr.write('Error connecting openexchangerates.org server:\n{}.'
                         '\n'.
                         format(err))
        exit(1)

    codestr = ""
    for currency in currencies.keys():
        codestr = codestr + \
                  currency + "\t" + currencies[currency].replace(" ", "") + \
                  "\n"

    ratestr = ""
    for rate in rates.keys():
        ratestr = ratestr + currencies[rate].replace(" ", "") +\
                "\t" + "1|" + str(rates[rate]) + " US$"
        ratestr = ratestr + "\n"

    try:
        req = requests.get('http://services.packetizer.com/spotprices/?f=json')
        req.raise_for_status()
        metals = req.json()
    except requests.exceptions.RequestException as err:
        sys.stderr.write('Error connecting to spotprices server:\n{}\n'
                         .format(err))
        exit(1)

    del metals['date']

    datestr = date.today().isoformat()

    ozzystr = '\n'.join('{:19}{} US$/troyounce'.format(
        metal + 'price',
        price,
        ) for metal, price in metals.items())

    outstr = (
        "# ISO Currency Codes\n"
        "{codestr}\n"
        "# Currency exchange rates from Open Exchange Rates (openexchangerates.org)\n"
        "!message Currency exchange rates from openexchangerates.org on {datestr}\n\n"

        "{ratestr}"
        "# Precious metals prices from Packetizer (services.packetizer.com/spotprices)\n"
        "{ozzystr}".format(
            codestr=codestr,
            datestr=datestr,
            ratestr=ratestr,
            ozzystr=ozzystr
        )
    ).replace('\n', linesep)

    try:
        if outfile_name == '-':
            codecs.StreamReader(sys.stdout, codecs.getreader('utf8')).write(outstr)
        else:
            with codecs.open(outfile_name, 'w', 'utf8') as outfile:
                outfile.write(outstr)
    except IOError as err:
        sys.stderr.write('Unable to write to output file:\n{}\n'.format(err))
        exit(1)


if __name__ == '__main__':
    main()
